// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  spaces        Space[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Space {
  id           String   @id @default(cuid())
  name         String
  description  String?
  icon         String?
  backdrop     String?
  tags         String[]
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sources      Source[]
  notes        Note[]
  chats        Chat[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Source {
  id           String   @id @default(cuid())
  name         String
  type         String   // pdf, image, audio, youtube, text
  url          String?
  filepath     String?
  tags         String[]
  metadata     Json?
  spaceId      String
  space        Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  chunks       Chunk[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Chunk {
  id           String   @id @default(cuid())
  content      String   @db.Text
  tags         String[]
  metadata     Json?
  embedding    Bytes?   // For hybrid search
  vectorId     String?  // Reference to vector DB
  sourceId     String
  source       Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  citations    Citation[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String   @db.Text
  tags         String[]
  spaceId      String
  space        Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Chat {
  id           String       @id @default(cuid())
  title        String?
  spaceId      String
  space        Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  messages     ChatMessage[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model ChatMessage {
  id           String   @id @default(cuid())
  role         String   // user or assistant
  content      String   @db.Text
  chatId       String
  chat         Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  citations    Citation[]
  createdAt    DateTime @default(now())
}

model Citation {
  id             String      @id @default(cuid())
  relevanceScore Float?
  chunkId        String
  chunk          Chunk       @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  messageId      String?
  message        ChatMessage? @relation(fields: [messageId], references: [id], onDelete: SetNull)
  createdAt      DateTime    @default(now())
}
