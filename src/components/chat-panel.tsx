"use client";

import { useState, useRef, useEffect } from "react";
import { SendIcon, RefreshCw } from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";

interface ChatPanelProps {
  spaceId: string;
}

// Mock data for initial messages
const initialMessages = [
  {
    id: "msg-1",
    role: "assistant",
    content:
      "Hello! I'm your AI assistant. I can help you with your knowledge workspace. Ask me anything about your notes or sources.",
  },
];

export function ChatPanel({ spaceId }: ChatPanelProps) {
  const [messages, setMessages] = useState<any[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [chatId, setChatId] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // In a real app, this would fetch the chat from the API
    const loadChat = async () => {
      await new Promise((resolve) => setTimeout(resolve, 500));
      setMessages(initialMessages);
      setChatId("chat-1");
    };

    loadChat();
  }, [spaceId]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage = { id: `msg-${Date.now()}`, role: "user", content: input };
    setMessages([...messages, userMessage]);
    setInput("");
    setIsLoading(true);

    try {
      // In a real app, this would be an API call to the AI service
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Simulate AI response
      const aiResponse = {
        id: `msg-${Date.now() + 1}`,
        role: "assistant",
        content:
          "I've analyzed your question and here's what I found based on your knowledge space. This is a simulated response that would normally be generated by an AI model with access to your notes and sources.",
        citations: [
          {
            text: "Introduction to Machine Learning.pdf",
            page: 42,
          },
        ],
      };

      setMessages((prev) => [...prev, aiResponse]);
    } catch (error) {
      console.error("Error sending message:", error);
      setMessages((prev) => [
        ...prev,
        {
          id: `msg-${Date.now() + 1}`,
          role: "assistant",
          content:
            "Sorry, I encountered an error. Please try again.",
        },
      ]);
      toast.error("Failed to process your message. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="h-full flex flex-col">
      <div className="p-4 border-b">
        <h2 className="text-xl font-semibold">Chat</h2>
        <p className="text-sm text-muted-foreground">
          Ask questions about your knowledge space
        </p>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <div className="text-center text-muted-foreground my-8">
            <p>No messages yet</p>
            <p className="text-sm">Ask a question to get started</p>
          </div>
        ) : (
          messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${
                message.role === "user" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-[80%] rounded-lg p-3 ${
                  message.role === "user"
                    ? "bg-primary text-primary-foreground"
                    : "bg-secondary"
                }`}
              >
                <p className="text-sm">{message.content}</p>
                {message.citations && (
                  <div className="mt-2 pt-2 border-t border-primary-foreground/20 text-xs">
                    <p className="font-semibold">Sources:</p>
                    {message.citations.map((citation: any, i: number) => (
                      <p key={i} className="opacity-80">
                        {citation.text} {citation.page && `(p. ${citation.page})`}
                      </p>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))
        )}
        {isLoading && (
          <div className="flex justify-center p-4">
            <RefreshCw className="w-6 h-6 animate-spin text-muted-foreground" />
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="p-4 border-t">
        <div className="flex gap-2">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask a question..."
            className="resize-none min-h-[60px]"
            onKeyDown={(e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleSend();
              }
            }}
          />
          <Button onClick={handleSend} disabled={isLoading} className="shrink-0">
            <SendIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
} 